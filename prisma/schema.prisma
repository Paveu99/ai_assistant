// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  sessions      Session[]
  accounts      Account[]
  workspaces    Workspace[]
  aiRequests    AIRequest[]
  chatSessions  ChatSession[]
}

model Account {
  id                 String   @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? 
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Workspace {
  id          String    @id @default(cuid())
  name        String
  ownerId     String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  owner       User      @relation(fields: [ownerId], references: [id])
  aiRequests  AIRequest[]
  chatSessions ChatSession[]
}

model AIRequest {
  id           String     @id @default(cuid())
  userId       String
  workspaceId  String?
  tool         ToolType
  inputCode    String
  result       String
  createdAt    DateTime   @default(now())

  user         User       @relation(fields: [userId], references: [id])
  workspace    Workspace? @relation(fields: [workspaceId], references: [id])
}

model ChatSession {
  id           String       @id @default(cuid())
  userId       String
  workspaceId  String?
  title        String?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  user         User         @relation(fields: [userId], references: [id])
  workspace    Workspace?   @relation(fields: [workspaceId], references: [id])
  messages     ChatMessage[]
}

model ChatMessage {
  id            String       @id @default(cuid())
  chatSessionId String
  role          RoleType 
  content       String
  createdAt     DateTime     @default(now())

  chatSession   ChatSession  @relation(fields: [chatSessionId], references: [id])
}

enum ToolType {
  EXPLAIN
  REFACTOR
  TESTS
  COMMIT
}

enum RoleType {
  user
  assistant
}
